{"version":3,"sources":["actions/index.js","utils/index.js","reducers/game-reducer.js","reducers/index.js","components/GridSquare.js","components/GridBoard.js","components/NextBlock.js","components/ScoreBoard.js","components/Controls.js","components/MessagePopUp.js","App.js","reportWebVitals.js","index.js"],"names":["PAUSE","RESUME","MOVE_LEFT","MOVE_RIGHT","ROTATE","MOVE_DOWN","GAME_OVER","RESTART","moveDown","type","gridDefault","array","row","push","col","shapes","randomShape","min","max","length","Math","floor","random","defaultState","grid","shape","rotation","x","y","nextShape","isRunning","score","speed","gameOver","nextRotation","canMoveTo","currentShape","proposedX","proposedY","possibleRow","undefined","addBlockToGrid","blockOffGrid","block","newGrid","checkRows","completedRows","indexOf","splice","unshift","Array","fill","gameReducer","state","action","newRotation","maybeY","obj","newState","reducers","combineReducers","game","GridSquare","props","classes","color","className","GridBoard","requestRef","useRef","lastUpdateTimeRef","progressTimeRef","dispatch","useDispatch","useSelector","blockColor","update","time","current","requestAnimationFrame","deltaTime","useEffect","cancelAnimationFrame","gridSquares","map","rowArray","square","blockX","blockY","k","NextBlock","ScoreBoard","onClick","e","Controls","disabled","MessagePopup","message","isHidden","store","createStore","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qNAAaA,EAAQ,QACRC,EAAS,SACTC,EAAY,YACZC,EAAa,aACbC,EAAS,SACTC,EAAY,YACZC,EAAY,YACZC,EAAU,UAcVC,EAAW,WACtB,MAAO,CAAEC,KAAMJ,I,QCjBJK,EAAc,WAOzB,IANA,IAEMC,EAAQ,GAILC,EAAM,EAAGA,EANL,GAMiBA,IAAO,CACnCD,EAAME,KAAK,IACX,IAAK,IAAIC,EAAM,EAAGA,EAPP,GAOmBA,IAC5BH,EAAMC,GAAKC,KAAK,GAIpB,OAAOF,GAIII,EAAS,CAEpB,CACE,CACE,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,KAKd,CACE,CACE,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,IAGZ,CACE,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,KAKd,CACE,CACE,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,IAGZ,CACE,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,IAGZ,CACE,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,IAGZ,CACE,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,KAKd,CACE,CACE,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,IAGZ,CACE,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,IAGZ,CACE,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,IAGZ,CACE,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,KAKd,CACE,CACE,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,IAGZ,CACE,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,IAGZ,CACE,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,IAGZ,CACE,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,KAKd,CACE,CACE,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,IAGZ,CACE,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,KAKd,CACE,CACE,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,IAGZ,CACE,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,KAKd,CACE,CACE,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EA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","file":"static/js/main.bf7d78bf.chunk.js","sourcesContent":["export const PAUSE = \"PAUSE\"; // Pause the game\nexport const RESUME = \"RESUME\"; // Resume a paused game\nexport const MOVE_LEFT = \"MOVE_LEFT\"; // Move piece left\nexport const MOVE_RIGHT = \"MOVE_RIGHT\"; // Move piece right\nexport const ROTATE = \"ROTATE\"; // Rotate piece\nexport const MOVE_DOWN = \"MOVE_DOWN\"; // Move piece down\nexport const GAME_OVER = \"GAME_OVER\"; // The game is over\nexport const RESTART = \"RESTART\"; // Restart Game\n\nexport const moveRight = () => {\n  return { type: MOVE_RIGHT };\n};\n\nexport const moveLeft = () => {\n  return { type: MOVE_LEFT };\n};\n\nexport const rotate = () => {\n  return { type: ROTATE };\n};\n\nexport const moveDown = () => {\n  return { type: MOVE_DOWN };\n};\n\nexport const pause = () => {\n  return { type: PAUSE };\n};\n\nexport const resume = () => {\n  return { type: RESUME };\n};\n\nexport const restart = () => {\n  return { type: RESTART };\n};\n","export const random = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n};\n\n// Returns the default grid\nexport const gridDefault = () => {\n  const rows = 18;\n  const cols = 10;\n  const array = [];\n\n  // Fill array with 18 arrays each containing\n  // 10 zeros (0)\n  for (let row = 0; row < rows; row++) {\n    array.push([]);\n    for (let col = 0; col < cols; col++) {\n      array[row].push(0);\n    }\n  }\n\n  return array;\n};\n\n// Define block shapes and their rotations as arrays.\nexport const shapes = [\n  // none\n  [\n    [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ],\n  ],\n\n  // I\n  [\n    [\n      [0, 0, 0, 0],\n      [1, 1, 1, 1],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ],\n\n    [\n      [0, 1, 0, 0],\n      [0, 1, 0, 0],\n      [0, 1, 0, 0],\n      [0, 1, 0, 0],\n    ],\n  ],\n\n  // T\n  [\n    [\n      [0, 0, 0, 0],\n      [1, 1, 1, 0],\n      [0, 1, 0, 0],\n      [0, 0, 0, 0],\n    ],\n\n    [\n      [0, 1, 0, 0],\n      [1, 1, 0, 0],\n      [0, 1, 0, 0],\n      [0, 0, 0, 0],\n    ],\n\n    [\n      [0, 1, 0, 0],\n      [1, 1, 1, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ],\n\n    [\n      [0, 1, 0, 0],\n      [0, 1, 1, 0],\n      [0, 1, 0, 0],\n      [0, 0, 0, 0],\n    ],\n  ],\n\n  // L\n  [\n    [\n      [0, 0, 0, 0],\n      [1, 1, 1, 0],\n      [1, 0, 0, 0],\n      [0, 0, 0, 0],\n    ],\n\n    [\n      [1, 1, 0, 0],\n      [0, 1, 0, 0],\n      [0, 1, 0, 0],\n      [0, 0, 0, 0],\n    ],\n\n    [\n      [0, 0, 1, 0],\n      [1, 1, 1, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ],\n\n    [\n      [0, 1, 0, 0],\n      [0, 1, 0, 0],\n      [0, 1, 1, 0],\n      [0, 0, 0, 0],\n    ],\n  ],\n\n  // J\n  [\n    [\n      [1, 0, 0, 0],\n      [1, 1, 1, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ],\n\n    [\n      [0, 1, 1, 0],\n      [0, 1, 0, 0],\n      [0, 1, 0, 0],\n      [0, 0, 0, 0],\n    ],\n\n    [\n      [0, 0, 0, 0],\n      [1, 1, 1, 0],\n      [0, 0, 1, 0],\n      [0, 0, 0, 0],\n    ],\n\n    [\n      [0, 1, 0, 0],\n      [0, 1, 0, 0],\n      [1, 1, 0, 0],\n      [0, 0, 0, 0],\n    ],\n  ],\n\n  // Z\n  [\n    [\n      [0, 0, 0, 0],\n      [1, 1, 0, 0],\n      [0, 1, 1, 0],\n      [0, 0, 0, 0],\n    ],\n\n    [\n      [0, 0, 1, 0],\n      [0, 1, 1, 0],\n      [0, 1, 0, 0],\n      [0, 0, 0, 0],\n    ],\n  ],\n\n  // S\n  [\n    [\n      [0, 0, 0, 0],\n      [0, 1, 1, 0],\n      [1, 1, 0, 0],\n      [0, 0, 0, 0],\n    ],\n\n    [\n      [0, 1, 0, 0],\n      [0, 1, 1, 0],\n      [0, 0, 1, 0],\n      [0, 0, 0, 0],\n    ],\n  ],\n\n  // O\n  [\n    [\n      [0, 1, 1, 0],\n      [0, 1, 1, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ],\n  ],\n];\n\n// Random Shape\nexport const randomShape = () => {\n  return random(1, shapes.length - 1);\n};\n\n// Return the default state for the game\nexport const defaultState = () => {\n  return {\n    // Create an empty grid\n    grid: gridDefault(),\n    // Get a new random shape\n    shape: randomShape(),\n    // set rotation of the shape to 0\n    rotation: 0,\n    // set the 'x' position of the shape to 5 and y to -4, which puts the shape in the center of the grid, above the top\n    x: 5,\n    y: -4,\n    // set the index of the next shape to a new random shape\n    nextShape: randomShape(),\n    // Tell the game that it's currently running\n    isRunning: true,\n    // Set the score to 0\n    score: 0,\n    // Set the default speed\n    speed: 1000,\n    // Game isn't over yet\n    gameOver: false,\n  };\n};\n\n// Returns the next rotation for a shape\n// rotation can't exceed the last index of the the rotations for the given shape.\nexport const nextRotation = (shape, rotation) => {\n  return (rotation + 1) % shapes[shape].length;\n};\nexport const canMoveTo = (shape, grid, x, y, rotation) => {\n  const currentShape = shapes[shape][rotation];\n  // Loop through all rows and cols of the **shape**\n  for (let row = 0; row < currentShape.length; row++) {\n    for (let col = 0; col < currentShape[row].length; col++) {\n      // Look for a 1 here\n      if (currentShape[row][col] !== 0) {\n        // x offset on grid\n        const proposedX = col + x;\n        // y offset on grid\n        const proposedY = row + y;\n        if (proposedY < 0) {\n          continue;\n        }\n        // Get the row on the grid\n        const possibleRow = grid[proposedY];\n        // Check row exists\n        if (possibleRow) {\n          // Check if this column in the row is undefined, if it's off the edges, 0, and empty\n          if (\n            possibleRow[proposedX] === undefined ||\n            possibleRow[proposedX] !== 0\n          ) {\n            // undefined or not 0 and it's occupied we can't move here.\n            return false;\n          }\n        } else {\n          return false;\n        }\n      }\n    }\n  }\n  return true;\n};\n\n// Adds current shape to grid\nexport const addBlockToGrid = (shape, grid, x, y, rotation) => {\n  // At this point the game is not over\n  let blockOffGrid = false\n  const block = shapes[shape][rotation]\n  const newGrid = [ ...grid ]\n  for (let row = 0; row < block.length; row++) {\n    for (let col = 0; col < block[row].length; col++) {\n      if (block[row][col]) {\n        const yIndex = row + y\n        // If the yIndex is less than 0 part of the block\n        // is off the top of the screen and the game is over\n        if (yIndex < 0) {\n          blockOffGrid = true\n        } else {\n          newGrid[row + y][col + x] = shape\n        }\n      }\n    }\n  }\n  // Return both the newGrid and the gameOver bool                                                \n  return { grid: newGrid, gameOver: blockOffGrid }\n}\n\n// Checks for completed rows and scores points\nexport const checkRows = (grid) => {\n  // Points increase for each row completed\n  // i.e. 40 points for completing one row, 100 points for two rows\n  const points = [0, 40, 100, 300, 1200];\n  let completedRows = 0;\n  for (let row = 0; row < grid.length; row++) {\n    // No empty cells means it can't find a 0, so the row must be complete!\n    if (grid[row].indexOf(0) === -1) {\n      completedRows += 1;\n      // Remove the row and add a new empty one at the top\n      grid.splice(row, 1);\n      grid.unshift(Array(10).fill(0));\n    }\n  }\n  return points[completedRows];\n};\n","import {\n  MOVE_RIGHT,\n  MOVE_LEFT,\n  MOVE_DOWN,\n  ROTATE,\n  PAUSE,\n  RESUME,\n  RESTART,\n  GAME_OVER,\n} from \"../actions\";\n\nimport {\n  defaultState,\n  nextRotation,\n  canMoveTo,\n  addBlockToGrid,\n  checkRows,\n  randomShape,\n} from \"../utils\";\n\nconst gameReducer = (state = defaultState(), action) => {\n  const { shape, grid, x, y, rotation, nextShape, score, isRunning } = state;\n  switch (action.type) {\n    case ROTATE:\n      const newRotation = nextRotation(shape, rotation);\n      if (canMoveTo(shape, grid, x, y, newRotation)) {\n        return { ...state, rotation: newRotation };\n      }\n      return state;\n\n    case MOVE_RIGHT:\n      if (canMoveTo(shape, grid, x + 1, y, rotation)) {\n        return { ...state, x: x + 1 };\n      }\n      return state;\n\n    case MOVE_LEFT:\n      // subtract 1 from the x and check if this new position is possible by calling `canMoveTo()\n      if (canMoveTo(shape, grid, x - 1, y, rotation)) {\n        return { ...state, x: x - 1 };\n      }\n      return state;\n\n    case MOVE_DOWN:\n      // Get the next potential Y position\n      const maybeY = y + 1;\n\n      // Check if the current block can move here\n      if (canMoveTo(shape, grid, x, maybeY, rotation)) {\n        // If so move down don't place the block\n        return { ...state, y: maybeY };\n      }\n\n      // If not place the block\n      // (this returns an object with a grid and gameover bool)\n      const obj = addBlockToGrid(shape, grid, x, y, rotation);\n      const newGrid = obj.grid;\n      const gameOver = obj.gameOver;\n\n      if (gameOver) {\n        // Game Over\n        const newState = { ...state };\n        newState.shape = 0;\n        newState.grid = newGrid;\n        return { ...state, gameOver: true };\n      }\n\n      // reset somethings to start a new shape/block\n      const newState = defaultState();\n      newState.grid = newGrid;\n      newState.shape = nextShape;\n      newState.score = score;\n      newState.isRunning = isRunning;\n\n      // TODO: Check and Set level\n      // Score increases decrease interval\n      newState.score = score + checkRows(newGrid);\n\n      return newState;\n\n    case RESUME:\n      return { ...state, isRunning: true };\n\n    case PAUSE:\n      return { ...state, isRunning: false };\n\n    case GAME_OVER:\n      return state;\n\n    case RESTART:\n      return defaultState();\n    default:\n      return state;\n  }\n};\n\nexport default gameReducer;\n","import { combineReducers } from \"redux\";\nimport gameReducer from \"./game-reducer\";\n\n// The state handled by `gameReducer` will be stored with the property name `game` on the Redux store.\nconst reducers = combineReducers({\n  game: gameReducer,\n});\n\nexport default reducers;\n","import React from \"react\";\n// Represents a grid square with a color\nexport default function GridSquare(props) {\n  const classes = `grid-square color-${props.color}`;\n  return <div className={classes} />;\n}\n","import GridSquare from \"./GridSquare\";\nimport { shapes } from \"../utils\";\nimport React, { useEffect, useRef } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { moveDown } from \"../actions\";\n\nexport default function GridBoard(props) {\n  const requestRef = useRef();\n  const lastUpdateTimeRef = useRef(0);\n  const progressTimeRef = useRef(0);\n  const dispatch = useDispatch();\n  const game = useSelector((state) => state.game);\n  const { grid, shape, rotation, x, y, isRunning, speed } = game;\n  const block = shapes[shape][rotation];\n  const blockColor = shape;\n\n  const update = (time) => {\n    requestRef.current = requestAnimationFrame(update);\n    if (!isRunning) {\n      return;\n    }\n    if (!lastUpdateTimeRef.current) {\n      lastUpdateTimeRef.current = time;\n    }\n    const deltaTime = time - lastUpdateTimeRef.current;\n    progressTimeRef.current += deltaTime;\n    if (progressTimeRef.current > speed) {\n      dispatch(moveDown());\n      progressTimeRef.current = 0;\n    }\n    lastUpdateTimeRef.current = time;\n  };\n\n   useEffect(() => {\n     requestRef.current = requestAnimationFrame(update);\n     return () => cancelAnimationFrame(requestRef.current);\n   }, [isRunning]);\n\n  // map rows\n  const gridSquares = grid.map((rowArray, row) => {\n    // map columns\n    return rowArray.map((square, col) => {\n      // Find the block x and y on the shape grid\n      // By subtracting the x and y from the col and the row we get the position of the upper left corner of the block array as if it was superimposed over the main grid\n      const blockX = col - x;\n      const blockY = row - y;\n      let color = square;\n      // Map current falling block to grid.\n      // For any squares that fall on the grid we need to look at the block array and see if there is a 1 in this case we use the block color.\n      if (\n        blockX >= 0 &&\n        blockX < block.length &&\n        blockY >= 0 &&\n        blockY < block.length\n      ) {\n        color = block[blockY][blockX] === 0 ? color : blockColor;\n      }\n      // Generate a unique key for every block\n      const k = row * grid[0].length + col;\n      // Generate a grid square\n      return <GridSquare key={k} color={color} />;\n    });\n  });\n  return <div className=\"grid-board\">{gridSquares}</div>;\n}\n","import React from \"react\";\nimport GridSquare from \"./GridSquare\";\nimport { useSelector } from \"react-redux\";\nimport { shapes } from \"../utils\";\n\n// Draws the \"next\" block view showing the next block to drop\nexport default function NextBlock(props) {\n  const nextShape = useSelector((state) => state.game.nextShape);\n  const box = shapes[nextShape][0]; // Get the first rotation\n  // Map the block to the grid\n  const grid = box.map((rowArray, row) => {\n    return rowArray.map((square, col) => {\n      return <GridSquare key={`${row}${col}`} color={square} />;\n    });\n  });\n\n  return <div className=\"next-block\">{grid}</div>;\n}\n","import React from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { pause, resume, restart } from \"../actions\";\n\nexport default function ScoreBoard(props) {\n  const dispatch = useDispatch();\n  const game = useSelector((state) => state.game);\n  const { score, isRunning, gameOver } = game;\n  return (\n    <div className=\"score-board\">\n      <div>Score:{score}</div>\n      <div>Level: 1</div>\n      <button\n        className=\"score-board-button\"\n        onClick={(e) => {\n          if (gameOver) {\n            return;\n          }\n          if (isRunning) {\n            dispatch(pause());\n          } else {\n            dispatch(resume());\n          }\n        }}\n      >\n        {isRunning ? \"Pause\" : \"Play\"}\n      </button>\n      <button\n        className=\"score-board-button\"\n        onClick={(e) => {\n          dispatch(restart());\n        }}\n      >\n        Restart\n      </button>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { moveDown, moveLeft, moveRight, rotate } from \"../actions\";\n\n\nexport default function Controls(props) {\n  const dispatch = useDispatch();\n  const { isRunning, gameOver } = useSelector((state) => state.game);\n  return (\n    <div className={`controls`}>\n\n      {/* left */}\n      <button\n        disabled={!isRunning || gameOver}\n        className=\"control-button\"\n        onClick={(e) => {\n          if (!isRunning || gameOver) {\n            return;\n          }\n          dispatch(moveLeft());\n        }}\n      >Left</button>\n\n      {/* right */}\n      <button\n        disabled={!isRunning || gameOver}\n        className=\"control-button\"\n        onClick={(e) => {\n          if (!isRunning || gameOver) {\n            return;\n          }\n          dispatch(moveRight());\n        }}\n      >Right</button>\n\n      {/* rotate */}\n      <button\n        disabled={!isRunning || gameOver}\n        className=\"control-button\"\n        onClick={(e) => {\n          if (!isRunning || gameOver) {\n            return;\n          }\n          dispatch(rotate());\n        }}\n      >Rotate</button>\n\n      {/* down */}\n      <button\n        disabled={!isRunning || gameOver}\n        className=\"control-button\"\n        onClick={(e) => {\n          if (!isRunning || gameOver) {\n            return;\n          }\n          dispatch(moveDown());\n        }}\n      >Down</button>\n\n    </div>\n  );\n}\n","import React from \"react\";\nimport { useSelector } from \"react-redux\";\n\n// Displays a message\nexport default function MessagePopup(props) {\n  const isRunning = useSelector((state) => state.game.isRunning);\n  const gameOver = useSelector((state) => state.game.gameOver);\n  let message = \"\";\n  let isHidden = \"hidden\";\n  if (gameOver) {\n    message = \"Game Over\";\n    isHidden = \"\";\n  } else if (!isRunning) {\n    message = \"Paused\";\n    isHidden = \"\";\n  }\n  return (\n    <div className={`message-popup ${isHidden}`}>\n      <h1>{message}</h1>\n    </div>\n  );\n}\n","import React from 'react';\nimport './App.css';\nimport './index.css';\nimport { createStore } from 'redux'\nimport { Provider } from 'react-redux'\nimport reducers from './reducers'\n\n//Components//\nimport GridBoard from './components/GridBoard'\nimport NextBlock from './components/NextBlock'\nimport ScoreBoard from './components/ScoreBoard'\nimport Controls from './components/Controls'\nimport MessagePopup from './components/MessagePopUp'\n\nconst store = createStore(reducers)\n\nfunction App() {\n  return (\n   <Provider store={store}>\n    <div className=\"App\">\n      <header className=\"App-Header\">\n        <h1 className=\"App-title\">Tetris Redux</h1>\n      </header>\n      <GridBoard />\n      <NextBlock />\n      <ScoreBoard/>\n      <Controls />\n      <MessagePopup />\n    </div>\n   </Provider>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}